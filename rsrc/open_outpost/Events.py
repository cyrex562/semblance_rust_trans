'''
Event manager as well as events.
'''
from twisted.spread import pb

class EventManager(object):
	'''
	Event manager for the server.  Based on the pygame prototype.
	Coordinates the model, view and controller.
	'''
	def __init__(self):
		from weakref import WeakKeyDictionary
		self.listeners = WeakKeyDictionary()
		self.eventQueue= []
		self.listenersToAdd = []
		self.listenersToRemove = []
		self._lock = False

	#----------------------------------------------------------------------
	def registerListener( self, listener ):
		self.listenersToAdd.append(listener)

	#----------------------------------------------------------------------
	def ActuallyUpdateListeners(self):
		for listener in self.listenersToAdd:
			self.listeners[ listener ] = 1
		for listener in self.listenersToRemove:
			if listener in self.listeners:
				del self.listeners[ listener ]

	#----------------------------------------------------------------------
	def UnregisterListener( self, listener ):
		self.listenersToRemove.append(listener)
		
	#----------------------------------------------------------------------
	def post( self, event ):
		self.eventQueue.append(event)
		print 'ev q is', self.eventQueue, 'lock is', self._lock
		if not self._lock:
			self._lock = True
			print 'consuming queue'
			self.ActuallyUpdateListeners()
			self.ConsumeEventQueue()
			self._lock = False

	#----------------------------------------------------------------------
	def ConsumeEventQueue(self):
		i = 0
		while i < len( self.eventQueue ):
			event = self.eventQueue[i]
			for listener in self.listeners:
				# Note: a side effect of notifying the listener
				# could be that more events are put on the queue
				# or listeners could Register / Unregister
				old = len(self.eventQueue)
				listener.Notify( event )
			i += 1
			if self.listenersToAdd:
				self.ActuallyUpdateListeners()
		#all code paths that could possibly add more events to 
		# the eventQueue have been exhausted at this point, so 
		# it's safe to empty the queue
		self.eventQueue= []

class Event:
	"""this is a superclass for any events that might be generated by an
	object and sent to the EventManager"""
	def __init__(self):
		self.name = "Generic Event"
		
class ClientConnectEvent(Event):
	"""this event is generated by the Server whenever a client connects
	to it"""
	def __init__(self, client, avatarID):
		self.name = "Network Client Connection Event"
		self.client = client
		self.avatarID = avatarID

class ClientDisconnectEvent(Event):
	"""this event is generated by the Server when it finds that a client 
	is no longer connected"""
	def __init__(self, avatarID):
		self.name = "Network Client Disconnection Event"
		self.avatarID = avatarID

class EndTurnRequest(Event, pb.Copyable, pb.RemoteCopy):
	'''
	this event is sent form client to server generated when a player clicks the end turn icon
	'''
	def __init__(self, player):
		self.name = 'End Turn Request'
		self.player = player
pb.setUnjellyableForClass(EndTurnRequest, EndTurnRequest)
